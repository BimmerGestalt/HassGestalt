plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.gladed.androidgitversion' version '0.4.14'
}

apply from: 'buildtools/external.gradle'

repositories {
    maven { url 'https://jitpack.io' }
}

def runProguardInDebug = false
def isRunningOnCI = System.getenv("CI") == "true"

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.2"

    androidGitVersion {
        hideBranches = [ 'main' ]
        // include build number for CI builds, omit for local builds
        // because local dev commonly involves switching between branches
        if (isRunningOnCI) {
            codeFormat = 'MMNNPPBBB'
        } else {
            codeFormat = 'MMNNPPXXX'
        }
    }
    defaultConfig {
        applicationId "io.bimmergestalt.hassgestalt"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode androidGitVersion.code() + 1
        versionName androidGitVersion.name()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
            'appAuthRedirectScheme': applicationId
        ]
    }

    signingConfigs {
        release
    }
    if (isRunningOnCI) {
        // configure keystore
        signingConfigs.release.storeFile = file("../keystore.jks")
        signingConfigs.release.storePassword = System.getenv("KEYSTORE_PASSWORD")
        signingConfigs.release.keyAlias = System.getenv("KEYSTORE_ALIAS")
        signingConfigs.release.keyPassword = System.getenv("KEYSTORE_ALIAS_PASSWORD")
    }
    applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            output.outputFileName = "HassGestalt-${variant.name}.apk"
        }
    }

    buildFeatures {
        dataBinding true
    }
    buildTypes {
        release {
            postprocessing {
                removeUnusedCode true
                obfuscate false
                optimizeCode true
                proguardFile 'proguard-rules.pro'
            }
            signingConfig signingConfigs.release
        }
        debug {
            if (runProguardInDebug || isRunningOnCI) {        // make sure to run tests against minified code in CI, but local dev can be fast
//                postprocessing {
//                    removeUnusedCode true
//                    obfuscate true
//                    optimizeCode true
//                    proguardFile 'proguard-rules.pro'
//                }
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    def assertGit = tasks.create(name: "assertGitVersionRelease") { doLast {
        throw new GradleException("Could not load git versionCode for release build, make sure the project is cloned from git")
    }}
    applicationVariants.all { variant ->
        if (!variant.buildType.isDebuggable() && variant.mergedFlavor.versionCode == 1) {
            def assembleTaskName = "assemble${variant.name.capitalize()}"
            tasks[assembleTaskName].dependsOn(assertGit)
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.fragment:fragment-ktx:1.4.1"
    implementation 'com.google.android.material:material:1.5.0'
    implementation "com.mikepenz:iconics-core:5.3.3"
    implementation 'com.mikepenz:community-material-typeface:6.4.95.0-kotlin@aar' // note 5.3.45.1 and newer alphabetically sorts, and merges in 3 sections

    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter:4.0.0'
    implementation 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter-recyclerview:4.0.0'

    implementation 'net.openid:appauth:0.10.0'
    implementation "org.java-websocket:Java-WebSocket:1.4.0"

    implementation 'io.bimmergestalt:IDriveConnectKit:0.6'
    implementation 'io.bimmergestalt:IDriveConnectKitAndroid:0.6'

    testImplementation 'junit:junit:4.+'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0'
    testImplementation "org.mockito:mockito-core:3.4.4"
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    testImplementation 'org.json:json:20140107'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}